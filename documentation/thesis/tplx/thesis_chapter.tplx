((*- extends 'null.tplx' -*))

%===============================================================================
% Support blocks
%===============================================================================
((=display data priority=))

((*- block data_priority scoped -*))
    ((*- for type in output.data | filter_data_type -*))
        ((*- if type == 'application/pdf' -*))
            ((*- block data_pdf -*))((( draw_figure(output.metadata.filenames['application/pdf']) )))((*- endblock -*))
        ((*- elif type == 'image/svg+xml' -*))
            ((*- block data_svg -*))((( draw_figure(output.metadata.filenames['image/svg+xml']) )))((*- endblock -*))
        ((*- elif type == 'image/png' -*))
            ((*- block data_png -*))((( draw_figure(output.metadata.filenames['image/png']) )))((*- endblock -*))
        ((*- elif type == 'text/html' -*))
            ((*- block data_html -*))
            ((*- endblock -*))
        ((*- elif type == 'text/markdown' -*))
            ((*- block data_markdown -*))
                ((( output.data['text/markdown'] | citation2latex | strip_files_prefix | convert_pandoc('markdown+tex_math_double_backslash', 'latex'))))
            ((*- endblock -*))
        ((*- elif type == 'image/jpeg' -*))
            ((*- block data_jpg -*))((( draw_figure(output.metadata.filenames['image/jpeg']) )))((*- endblock -*))
        ((*- elif type == 'text/plain' -*))
            ((*- block data_text -*))
                \begin{verbatim}
            ((( output.data['text/plain'] )))
                \end{verbatim}
            ((*- endblock -*))
        ((*- elif type == 'text/latex' -*))
            ((*- block data_latex -*))
                ((( output.data['text/latex'] | strip_files_prefix )))
            ((*- endblock -*))
        ((*- elif type == 'application/javascript' -*))
            ((*- block data_javascript -*))
            ((*- endblock -*))
        ((*- elif type == 'application/vnd.jupyter.widget-state+json' -*))
            ((*- block data_widget_state -*))
            ((*- endblock -*))
        ((*- elif type == 'application/vnd.jupyter.widget-view+json' -*))
            ((*- block data_widget_view -*))
            ((*- endblock -*))
        ((*- else -*))
            ((*- block data_other -*))
            ((*- endblock -*))
        ((*- endif -*))
    ((*- endfor -*))
((*- endblock data_priority -*))

% Display python error text as-is
((* block error *))
    \begin{Verbatim}[commandchars=\\\{\}]
((( super() )))
    \end{Verbatim}
((* endblock error *))
((* block traceback_line *))
    ((( line | indent | strip_ansi | escape_latex )))
((* endblock traceback_line *))

% Draw a figure using the graphicx package.
((* macro draw_figure(filename) -*))
((* set filename = filename | posix_path *))
((*- block figure scoped -*))
    \begin{center}
    \adjustimage{max size={0.9\linewidth}{0.9\paperheight}}{((( filename )))}
    \end{center}
    { \hspace*{\fill} \\}
((*- endblock figure -*))
((*- endmacro *))

% Render markdown
((* block markdowncell scoped *))
    ((( cell.source | citation2latex | strip_files_prefix | convert_pandoc('markdown+tex_math_double_backslash', 'json',extra_args=[]) | resolve_references | convert_pandoc('json','latex'))))
((* endblock markdowncell *))

% Don't display unknown types
((* block unknowncell scoped *))
((* endblock unknowncell *))

%===============================================================================
% Abstract overrides
%===============================================================================

%===============================================================================
% Input
%===============================================================================

((* block input scoped *))
    ((( draw_cell(cell.source | highlight_code(strip_verbatim=True), cell, 'In', 'incolor', '\\boxspacing') )))
((* endblock input *))


%===============================================================================
% Output
%===============================================================================

((*- if charlim is not defined -*))
    ((* set charlim = 80 *))
((*- endif -*))

((* block execute_result scoped *))
    ((*- for type in output.data | filter_data_type -*))
        ((*- if type in ['text/plain']*))
            ((( draw_cell(output.data['text/plain'] | wrap_text(charlim) | escape_latex | ansi2latex, cell, 'Out', 'outcolor', '\\boxspacing') )))
        ((* else -*))
            ((( " " )))
            ((( draw_prompt(cell, 'Out', 'outcolor','') )))((( super() )))
        ((*- endif -*))
    ((*- endfor -*))
((* endblock execute_result *))

((* block stream *))
    \begin{Verbatim}[commandchars=\\\{\}]
((( output.text | wrap_text(charlim) | escape_latex | strip_trailing_newline | ansi2latex )))
    \end{Verbatim}
((* endblock stream *))

%==============================================================================
% Support Macros
%==============================================================================

% Name: draw_cell
% Purpose: Renders an output/input prompt
((*- if draw_cell is not defined -*)) % Required to allow overriding.
((* macro draw_cell(text, cell, prompt, prompt_color, extra_space) -*))
((*- if prompt == 'In' -*))
((*- set style = "breakable, size=fbox, boxrule=1pt, pad at break*=1mm,colback=cellbackground, colframe=cellborder"-*))
((*- else -*))((*- set style = "breakable, size=fbox, boxrule=.5pt, pad at break*=1mm, opacityfill=0"-*))((*-  endif -*))

\begin{tcolorbox}[((( style )))]
(((- draw_prompt(cell, prompt, prompt_color, extra_space) )))
\begin{Verbatim}[commandchars=\\\{\}]
((( text )))
\end{Verbatim}
\end{tcolorbox}
((*- endmacro *))
((*- endif -*))

% Name: draw_prompt
% Purpose: Renders an output/input prompt
((* macro draw_prompt(cell, prompt, prompt_color, extra_space) -*))
    ((*- if cell.execution_count is defined -*))
    ((*- set execution_count = "" ~ (cell.execution_count | replace(None, " ")) -*))
    ((*- else -*))((*- set execution_count = " " -*))((*- endif *))

    ((*- if (resources.global_content_filter.include_output_prompt and prompt == 'Out')
         or (resources.global_content_filter.include_input_prompt  and prompt == 'In' ) *))
\prompt{(((prompt)))}{(((prompt_color)))}{(((execution_count)))}{(((extra_space)))}
    ((*- endif -*))
((*- endmacro *))

%===============================================================================
% Latex Article
%===============================================================================

% Disable input cells
((* block input_group *))
((* endblock input_group *))

((* block body *))
%\begin{document}
%TC:envir longtable [ignore] ignore
((( super() )))
%\end{document}
((* endblock body *))
